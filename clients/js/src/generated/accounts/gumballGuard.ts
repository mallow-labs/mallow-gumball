/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type GumballGuard = Account<GumballGuardAccountData>;

export type GumballGuardAccountData = {
  discriminator: Array<number>;
  base: PublicKey;
  bump: number;
  authority: PublicKey;
};

export type GumballGuardAccountDataArgs = {
  base: PublicKey;
  bump: number;
  authority: PublicKey;
};

export function getGumballGuardAccountDataSerializer(): Serializer<
  GumballGuardAccountDataArgs,
  GumballGuardAccountData
> {
  return mapSerializer<
    GumballGuardAccountDataArgs,
    any,
    GumballGuardAccountData
  >(
    struct<GumballGuardAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['base', publicKeySerializer()],
        ['bump', u8()],
        ['authority', publicKeySerializer()],
      ],
      { description: 'GumballGuardAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [54, 108, 243, 249, 30, 106, 227, 211],
    })
  ) as Serializer<GumballGuardAccountDataArgs, GumballGuardAccountData>;
}

export function deserializeGumballGuard(rawAccount: RpcAccount): GumballGuard {
  return deserializeAccount(rawAccount, getGumballGuardAccountDataSerializer());
}

export async function fetchGumballGuard(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<GumballGuard> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'GumballGuard');
  return deserializeGumballGuard(maybeAccount);
}

export async function safeFetchGumballGuard(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<GumballGuard | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeGumballGuard(maybeAccount) : null;
}

export async function fetchAllGumballGuard(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<GumballGuard[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'GumballGuard');
    return deserializeGumballGuard(maybeAccount);
  });
}

export async function safeFetchAllGumballGuard(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<GumballGuard[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeGumballGuard(maybeAccount as RpcAccount));
}

export function getGumballGuardGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'gumballGuard',
    'GGRDy4ieS7ExrUu313QkszyuT9o3BvDLuc3H5VLgCpSF'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      base: PublicKey;
      bump: number;
      authority: PublicKey;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      base: [8, publicKeySerializer()],
      bump: [40, u8()],
      authority: [41, publicKeySerializer()],
    })
    .deserializeUsing<GumballGuard>((account) =>
      deserializeGumballGuard(account)
    )
    .whereField('discriminator', [54, 108, 243, 249, 30, 106, 227, 211]);
}

export function getGumballGuardSize(): number {
  return 73;
}

export function findGumballGuardPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    /** The base address which the Gumball Guard PDA derives from */
    base: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'gumballGuard',
    'GGRDy4ieS7ExrUu313QkszyuT9o3BvDLuc3H5VLgCpSF'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('gumball_guard'),
    publicKeySerializer().serialize(seeds.base),
  ]);
}

export async function fetchGumballGuardFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findGumballGuardPda>[1],
  options?: RpcGetAccountOptions
): Promise<GumballGuard> {
  return fetchGumballGuard(
    context,
    findGumballGuardPda(context, seeds),
    options
  );
}

export async function safeFetchGumballGuardFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findGumballGuardPda>[1],
  options?: RpcGetAccountOptions
): Promise<GumballGuard | null> {
  return safeFetchGumballGuard(
    context,
    findGumballGuardPda(context, seeds),
    options
  );
}
