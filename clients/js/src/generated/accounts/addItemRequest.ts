/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  TokenStandard,
  TokenStandardArgs,
  getTokenStandardSerializer,
} from '../types';

/** Add item request state. */
export type AddItemRequest = Account<AddItemRequestAccountData>;

export type AddItemRequestAccountData = {
  discriminator: Array<number>;
  /** Gumball machine address. */
  gumballMachine: PublicKey;
  /** Seller address. */
  seller: PublicKey;
  /** Asset address. */
  asset: PublicKey;
  /** Token standard. */
  tokenStandard: TokenStandard;
};

export type AddItemRequestAccountDataArgs = {
  /** Gumball machine address. */
  gumballMachine: PublicKey;
  /** Seller address. */
  seller: PublicKey;
  /** Asset address. */
  asset: PublicKey;
  /** Token standard. */
  tokenStandard: TokenStandardArgs;
};

export function getAddItemRequestAccountDataSerializer(): Serializer<
  AddItemRequestAccountDataArgs,
  AddItemRequestAccountData
> {
  return mapSerializer<
    AddItemRequestAccountDataArgs,
    any,
    AddItemRequestAccountData
  >(
    struct<AddItemRequestAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['gumballMachine', publicKeySerializer()],
        ['seller', publicKeySerializer()],
        ['asset', publicKeySerializer()],
        ['tokenStandard', getTokenStandardSerializer()],
      ],
      { description: 'AddItemRequestAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [234, 140, 142, 7, 121, 224, 48, 173],
    })
  ) as Serializer<AddItemRequestAccountDataArgs, AddItemRequestAccountData>;
}

export function deserializeAddItemRequest(
  rawAccount: RpcAccount
): AddItemRequest {
  return deserializeAccount(
    rawAccount,
    getAddItemRequestAccountDataSerializer()
  );
}

export async function fetchAddItemRequest(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<AddItemRequest> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'AddItemRequest');
  return deserializeAddItemRequest(maybeAccount);
}

export async function safeFetchAddItemRequest(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<AddItemRequest | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeAddItemRequest(maybeAccount) : null;
}

export async function fetchAllAddItemRequest(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<AddItemRequest[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'AddItemRequest');
    return deserializeAddItemRequest(maybeAccount);
  });
}

export async function safeFetchAllAddItemRequest(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<AddItemRequest[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeAddItemRequest(maybeAccount as RpcAccount)
    );
}

export function getAddItemRequestGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mallowGumball',
    'MGUMqztv7MHgoHBYWbvMyL3E3NJ4UHfTwgLJUQAbKGa'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      gumballMachine: PublicKey;
      seller: PublicKey;
      asset: PublicKey;
      tokenStandard: TokenStandardArgs;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      gumballMachine: [8, publicKeySerializer()],
      seller: [40, publicKeySerializer()],
      asset: [72, publicKeySerializer()],
      tokenStandard: [104, getTokenStandardSerializer()],
    })
    .deserializeUsing<AddItemRequest>((account) =>
      deserializeAddItemRequest(account)
    )
    .whereField('discriminator', [234, 140, 142, 7, 121, 224, 48, 173]);
}

export function getAddItemRequestSize(): number {
  return 105;
}

export function findAddItemRequestPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    /** The address of the asset being added to the Gumball Machine */
    asset: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'mallowGumball',
    'MGUMqztv7MHgoHBYWbvMyL3E3NJ4UHfTwgLJUQAbKGa'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('add_item_request'),
    publicKeySerializer().serialize(seeds.asset),
  ]);
}

export async function fetchAddItemRequestFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findAddItemRequestPda>[1],
  options?: RpcGetAccountOptions
): Promise<AddItemRequest> {
  return fetchAddItemRequest(
    context,
    findAddItemRequestPda(context, seeds),
    options
  );
}

export async function safeFetchAddItemRequestFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findAddItemRequestPda>[1],
  options?: RpcGetAccountOptions
): Promise<AddItemRequest | null> {
  return safeFetchAddItemRequest(
    context,
    findAddItemRequestPda(context, seeds),
    options
  );
}
