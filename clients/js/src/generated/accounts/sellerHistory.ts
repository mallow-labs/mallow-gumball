/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

/** Seller history state to track count of items submitted to a gumball machine. */
export type SellerHistory = Account<SellerHistoryAccountData>;

export type SellerHistoryAccountData = {
  discriminator: Array<number>;
  /** Gumball machine we're tracking for */
  gumballMachine: PublicKey;
  /** Seller address */
  seller: PublicKey;
  /** Item count submitted by this seller */
  itemCount: bigint;
};

export type SellerHistoryAccountDataArgs = {
  /** Gumball machine we're tracking for */
  gumballMachine: PublicKey;
  /** Seller address */
  seller: PublicKey;
  /** Item count submitted by this seller */
  itemCount: number | bigint;
};

export function getSellerHistoryAccountDataSerializer(): Serializer<
  SellerHistoryAccountDataArgs,
  SellerHistoryAccountData
> {
  return mapSerializer<
    SellerHistoryAccountDataArgs,
    any,
    SellerHistoryAccountData
  >(
    struct<SellerHistoryAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['gumballMachine', publicKeySerializer()],
        ['seller', publicKeySerializer()],
        ['itemCount', u64()],
      ],
      { description: 'SellerHistoryAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [88, 76, 98, 176, 228, 154, 34, 164],
    })
  ) as Serializer<SellerHistoryAccountDataArgs, SellerHistoryAccountData>;
}

export function deserializeSellerHistory(
  rawAccount: RpcAccount
): SellerHistory {
  return deserializeAccount(
    rawAccount,
    getSellerHistoryAccountDataSerializer()
  );
}

export async function fetchSellerHistory(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<SellerHistory> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'SellerHistory');
  return deserializeSellerHistory(maybeAccount);
}

export async function safeFetchSellerHistory(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<SellerHistory | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeSellerHistory(maybeAccount) : null;
}

export async function fetchAllSellerHistory(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<SellerHistory[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'SellerHistory');
    return deserializeSellerHistory(maybeAccount);
  });
}

export async function safeFetchAllSellerHistory(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<SellerHistory[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeSellerHistory(maybeAccount as RpcAccount)
    );
}

export function getSellerHistoryGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mallowGumball',
    'MGUMqztv7MHgoHBYWbvMyL3E3NJ4UHfTwgLJUQAbKGa'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      gumballMachine: PublicKey;
      seller: PublicKey;
      itemCount: number | bigint;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      gumballMachine: [8, publicKeySerializer()],
      seller: [40, publicKeySerializer()],
      itemCount: [72, u64()],
    })
    .deserializeUsing<SellerHistory>((account) =>
      deserializeSellerHistory(account)
    )
    .whereField('discriminator', [88, 76, 98, 176, 228, 154, 34, 164]);
}

export function getSellerHistorySize(): number {
  return 80;
}

export function findSellerHistoryPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    /** The address of the Gumball Machine account */
    gumballMachine: PublicKey;
    /** The seller this history is tracking */
    seller: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'mallowGumball',
    'MGUMqztv7MHgoHBYWbvMyL3E3NJ4UHfTwgLJUQAbKGa'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('seller_history'),
    publicKeySerializer().serialize(seeds.gumballMachine),
    publicKeySerializer().serialize(seeds.seller),
  ]);
}

export async function fetchSellerHistoryFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findSellerHistoryPda>[1],
  options?: RpcGetAccountOptions
): Promise<SellerHistory> {
  return fetchSellerHistory(
    context,
    findSellerHistoryPda(context, seeds),
    options
  );
}

export async function safeFetchSellerHistoryFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findSellerHistoryPda>[1],
  options?: RpcGetAccountOptions
): Promise<SellerHistory | null> {
  return safeFetchSellerHistory(
    context,
    findSellerHistoryPda(context, seeds),
    options
  );
}
