/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  array,
  option,
  publicKey as publicKeySerializer,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  GumballMachineAccountData,
  getGumballMachineAccountDataSerializer,
} from '../../hooked';
import {
  FeeConfigArgs,
  GumballSettingsArgs,
  GumballStateArgs,
  getFeeConfigSerializer,
  getGumballSettingsSerializer,
  getGumballStateSerializer,
} from '../types';

/** Gumball machine state and config data. */
export type GumballMachine = Account<GumballMachineAccountData>;

export function deserializeGumballMachine(
  rawAccount: RpcAccount
): GumballMachine {
  return deserializeAccount(
    rawAccount,
    getGumballMachineAccountDataSerializer()
  );
}

export async function fetchGumballMachine(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<GumballMachine> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'GumballMachine');
  return deserializeGumballMachine(maybeAccount);
}

export async function safeFetchGumballMachine(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<GumballMachine | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeGumballMachine(maybeAccount) : null;
}

export async function fetchAllGumballMachine(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<GumballMachine[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'GumballMachine');
    return deserializeGumballMachine(maybeAccount);
  });
}

export async function safeFetchAllGumballMachine(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<GumballMachine[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeGumballMachine(maybeAccount as RpcAccount)
    );
}

export function getGumballMachineGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mallowGumball',
    'MGUMqztv7MHgoHBYWbvMyL3E3NJ4UHfTwgLJUQAbKGa'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      version: number;
      authority: PublicKey;
      mintAuthority: PublicKey;
      marketplaceFeeConfig: OptionOrNullable<FeeConfigArgs>;
      itemsRedeemed: number | bigint;
      itemsSettled: number | bigint;
      totalRevenue: number | bigint;
      state: GumballStateArgs;
      settings: GumballSettingsArgs;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      version: [8, u8()],
      authority: [9, publicKeySerializer()],
      mintAuthority: [41, publicKeySerializer()],
      marketplaceFeeConfig: [73, option(getFeeConfigSerializer())],
      itemsRedeemed: [null, u64()],
      itemsSettled: [null, u64()],
      totalRevenue: [null, u64()],
      state: [null, getGumballStateSerializer()],
      settings: [null, getGumballSettingsSerializer()],
    })
    .deserializeUsing<GumballMachine>((account) =>
      deserializeGumballMachine(account)
    )
    .whereField('discriminator', [87, 13, 57, 25, 98, 234, 26, 27]);
}
