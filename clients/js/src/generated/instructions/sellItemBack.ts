/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  findMasterEditionPda,
  findMetadataPda,
  findTokenRecordPda,
} from '@metaplex-foundation/mpl-token-metadata';
import { findAssociatedTokenPda } from '@metaplex-foundation/mpl-toolbox';
import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u32,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  findEventAuthorityPda,
  findGumballMachineAuthorityPda,
} from '../../hooked';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type SellItemBackInstructionAccounts = {
  /** Must be the oracle signer or seller (oracle signer can sell on behalf of the seller to allow auto-buy back) */
  payer?: Signer;
  /** Oracle signer */
  oracleSigner: Signer;
  /** Gumball machine account. */
  gumballMachine: PublicKey | Pda;
  authorityPda?: PublicKey | Pda;
  /** Mint of the item (or asset for Core assets) */
  mint: PublicKey | Pda;
  /** Seller of the item */
  seller?: PublicKey | Pda;
  /** Buyer of the item */
  buyer: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associatedTokenProgram?: PublicKey | Pda;
  rent?: PublicKey | Pda;
  /**
   * OPTIONAL FEE ACCOUNTS - only required if there is a fee config on the gumball machine
   * Marketplace fee account
   */

  feeAccount?: PublicKey | Pda;
  /** Marketplace fee payment account */
  feePaymentAccount?: PublicKey | Pda;
  /**
   * OPTIONAL SPL TOKEN ACCOUNTS - only required if selling for SPL token
   * Mint of payment token
   */

  paymentMint?: PublicKey | Pda;
  /** Seller payment account */
  sellerPaymentAccount?: PublicKey | Pda;
  /** Authority PDA payment account */
  authorityPdaPaymentAccount?: PublicKey | Pda;
  /**
   * OPTIONAL CORE ASSET ACCOUNTS - only required if selling Core asset
   * Collection of the asset
   */

  collection?: PublicKey | Pda;
  mplCoreProgram?: PublicKey | Pda;
  /**
   * OPTIONAL TOKEN ACCOUNTS - only required if selling NFT or Fungible assets
   * Authority PDA token account
   */

  authorityPdaTokenAccount?: PublicKey | Pda;
  /** Seller token account */
  sellerTokenAccount?: PublicKey | Pda;
  /** Buyer token account */
  buyerTokenAccount?: PublicKey | Pda;
  /** OPTIONAL NFT ACCOUNTS - only required if selling NFT or PNFT */
  metadata?: PublicKey | Pda;
  edition?: PublicKey | Pda;
  tokenMetadataProgram?: PublicKey | Pda;
  /** OPTIONAL PNFT ACCOUNTS - only required if selling PNFT */
  authorityPdaTokenRecord?: PublicKey | Pda;
  buyerTokenRecord?: PublicKey | Pda;
  authRules?: PublicKey | Pda;
  instructions?: PublicKey | Pda;
  authRulesProgram?: PublicKey | Pda;
  eventAuthority?: PublicKey | Pda;
  program?: PublicKey | Pda;
};

// Data.
export type SellItemBackInstructionData = {
  discriminator: Array<number>;
  index: number;
  amount: bigint;
  buyPrice: bigint;
};

export type SellItemBackInstructionDataArgs = {
  index: number;
  amount: number | bigint;
  buyPrice: number | bigint;
};

export function getSellItemBackInstructionDataSerializer(): Serializer<
  SellItemBackInstructionDataArgs,
  SellItemBackInstructionData
> {
  return mapSerializer<
    SellItemBackInstructionDataArgs,
    any,
    SellItemBackInstructionData
  >(
    struct<SellItemBackInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['index', u32()],
        ['amount', u64()],
        ['buyPrice', u64()],
      ],
      { description: 'SellItemBackInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [44, 114, 171, 76, 76, 10, 150, 246],
    })
  ) as Serializer<SellItemBackInstructionDataArgs, SellItemBackInstructionData>;
}

// Args.
export type SellItemBackInstructionArgs = SellItemBackInstructionDataArgs;

// Instruction.
export function sellItemBack(
  context: Pick<Context, 'eddsa' | 'identity' | 'payer' | 'programs'>,
  input: SellItemBackInstructionAccounts & SellItemBackInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mallowGumball',
    'MGUMqztv7MHgoHBYWbvMyL3E3NJ4UHfTwgLJUQAbKGa'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    payer: { index: 0, isWritable: true, value: input.payer ?? null },
    oracleSigner: {
      index: 1,
      isWritable: false,
      value: input.oracleSigner ?? null,
    },
    gumballMachine: {
      index: 2,
      isWritable: true,
      value: input.gumballMachine ?? null,
    },
    authorityPda: {
      index: 3,
      isWritable: true,
      value: input.authorityPda ?? null,
    },
    mint: { index: 4, isWritable: true, value: input.mint ?? null },
    seller: { index: 5, isWritable: true, value: input.seller ?? null },
    buyer: { index: 6, isWritable: true, value: input.buyer ?? null },
    systemProgram: {
      index: 7,
      isWritable: false,
      value: input.systemProgram ?? null,
    },
    tokenProgram: {
      index: 8,
      isWritable: false,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 9,
      isWritable: false,
      value: input.associatedTokenProgram ?? null,
    },
    rent: { index: 10, isWritable: false, value: input.rent ?? null },
    feeAccount: {
      index: 11,
      isWritable: true,
      value: input.feeAccount ?? null,
    },
    feePaymentAccount: {
      index: 12,
      isWritable: true,
      value: input.feePaymentAccount ?? null,
    },
    paymentMint: {
      index: 13,
      isWritable: true,
      value: input.paymentMint ?? null,
    },
    sellerPaymentAccount: {
      index: 14,
      isWritable: true,
      value: input.sellerPaymentAccount ?? null,
    },
    authorityPdaPaymentAccount: {
      index: 15,
      isWritable: true,
      value: input.authorityPdaPaymentAccount ?? null,
    },
    collection: {
      index: 16,
      isWritable: true,
      value: input.collection ?? null,
    },
    mplCoreProgram: {
      index: 17,
      isWritable: false,
      value: input.mplCoreProgram ?? null,
    },
    authorityPdaTokenAccount: {
      index: 18,
      isWritable: true,
      value: input.authorityPdaTokenAccount ?? null,
    },
    sellerTokenAccount: {
      index: 19,
      isWritable: true,
      value: input.sellerTokenAccount ?? null,
    },
    buyerTokenAccount: {
      index: 20,
      isWritable: true,
      value: input.buyerTokenAccount ?? null,
    },
    metadata: { index: 21, isWritable: true, value: input.metadata ?? null },
    edition: { index: 22, isWritable: true, value: input.edition ?? null },
    tokenMetadataProgram: {
      index: 23,
      isWritable: false,
      value: input.tokenMetadataProgram ?? null,
    },
    authorityPdaTokenRecord: {
      index: 24,
      isWritable: true,
      value: input.authorityPdaTokenRecord ?? null,
    },
    buyerTokenRecord: {
      index: 25,
      isWritable: true,
      value: input.buyerTokenRecord ?? null,
    },
    authRules: { index: 26, isWritable: false, value: input.authRules ?? null },
    instructions: {
      index: 27,
      isWritable: false,
      value: input.instructions ?? null,
    },
    authRulesProgram: {
      index: 28,
      isWritable: false,
      value: input.authRulesProgram ?? null,
    },
    eventAuthority: {
      index: 29,
      isWritable: false,
      value: input.eventAuthority ?? null,
    },
    program: { index: 30, isWritable: false, value: input.program ?? null },
  };

  // Arguments.
  const resolvedArgs: SellItemBackInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.authorityPda.value) {
    resolvedAccounts.authorityPda.value = findGumballMachineAuthorityPda(
      context,
      { gumballMachine: expectPublicKey(resolvedAccounts.gumballMachine.value) }
    );
  }
  if (!resolvedAccounts.seller.value) {
    resolvedAccounts.seller.value = context.identity.publicKey;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.associatedTokenProgram.value) {
    resolvedAccounts.associatedTokenProgram.value =
      context.programs.getPublicKey(
        'splAssociatedToken',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      );
    resolvedAccounts.associatedTokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.rent.value) {
    resolvedAccounts.rent.value = publicKey(
      'SysvarRent111111111111111111111111111111111'
    );
  }
  if (!resolvedAccounts.sellerPaymentAccount.value) {
    if (resolvedAccounts.paymentMint.value) {
      resolvedAccounts.sellerPaymentAccount.value = findAssociatedTokenPda(
        context,
        {
          mint: expectPublicKey(resolvedAccounts.paymentMint.value),
          owner: expectPublicKey(resolvedAccounts.seller.value),
        }
      );
    }
  }
  if (!resolvedAccounts.authorityPdaPaymentAccount.value) {
    if (resolvedAccounts.paymentMint.value) {
      resolvedAccounts.authorityPdaPaymentAccount.value =
        findAssociatedTokenPda(context, {
          mint: expectPublicKey(resolvedAccounts.paymentMint.value),
          owner: expectPublicKey(resolvedAccounts.authorityPda.value),
        });
    }
  }
  if (!resolvedAccounts.authorityPdaTokenAccount.value) {
    if (resolvedAccounts.tokenMetadataProgram.value) {
      resolvedAccounts.authorityPdaTokenAccount.value = findAssociatedTokenPda(
        context,
        {
          mint: expectPublicKey(resolvedAccounts.mint.value),
          owner: expectPublicKey(resolvedAccounts.authorityPda.value),
        }
      );
    }
  }
  if (!resolvedAccounts.sellerTokenAccount.value) {
    if (resolvedAccounts.tokenMetadataProgram.value) {
      resolvedAccounts.sellerTokenAccount.value = findAssociatedTokenPda(
        context,
        {
          mint: expectPublicKey(resolvedAccounts.mint.value),
          owner: expectPublicKey(resolvedAccounts.seller.value),
        }
      );
    }
  }
  if (!resolvedAccounts.buyerTokenAccount.value) {
    if (resolvedAccounts.tokenMetadataProgram.value) {
      resolvedAccounts.buyerTokenAccount.value = findAssociatedTokenPda(
        context,
        {
          mint: expectPublicKey(resolvedAccounts.mint.value),
          owner: expectPublicKey(resolvedAccounts.buyer.value),
        }
      );
    }
  }
  if (!resolvedAccounts.metadata.value) {
    if (resolvedAccounts.tokenMetadataProgram.value) {
      resolvedAccounts.metadata.value = findMetadataPda(context, {
        mint: expectPublicKey(resolvedAccounts.mint.value),
      });
    }
  }
  if (!resolvedAccounts.edition.value) {
    if (resolvedAccounts.tokenMetadataProgram.value) {
      resolvedAccounts.edition.value = findMasterEditionPda(context, {
        mint: expectPublicKey(resolvedAccounts.mint.value),
      });
    }
  }
  if (!resolvedAccounts.authorityPdaTokenRecord.value) {
    if (resolvedAccounts.authRulesProgram.value) {
      resolvedAccounts.authorityPdaTokenRecord.value = findTokenRecordPda(
        context,
        {
          mint: expectPublicKey(resolvedAccounts.mint.value),
          token: expectPublicKey(
            resolvedAccounts.authorityPdaTokenAccount.value
          ),
        }
      );
    }
  }
  if (!resolvedAccounts.buyerTokenRecord.value) {
    if (resolvedAccounts.authRulesProgram.value) {
      resolvedAccounts.buyerTokenRecord.value = findTokenRecordPda(context, {
        mint: expectPublicKey(resolvedAccounts.mint.value),
        token: expectPublicKey(resolvedAccounts.buyerTokenAccount.value),
      });
    }
  }
  if (!resolvedAccounts.instructions.value) {
    if (resolvedAccounts.authRulesProgram.value) {
      resolvedAccounts.instructions.value = publicKey(
        'Sysvar1nstructions1111111111111111111111111'
      );
    }
  }
  if (!resolvedAccounts.eventAuthority.value) {
    resolvedAccounts.eventAuthority.value = findEventAuthorityPda(context);
  }
  if (!resolvedAccounts.program.value) {
    resolvedAccounts.program.value = context.programs.getPublicKey(
      'mallowGumball',
      'MGUMqztv7MHgoHBYWbvMyL3E3NJ4UHfTwgLJUQAbKGa'
    );
    resolvedAccounts.program.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getSellItemBackInstructionDataSerializer().serialize(
    resolvedArgs as SellItemBackInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
