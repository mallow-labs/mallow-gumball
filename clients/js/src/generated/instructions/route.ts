/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  option,
  string,
  struct,
  u32,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findGumballGuardPda } from '../../hooked';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';
import { GuardType, GuardTypeArgs, getGuardTypeSerializer } from '../types';

// Accounts.
export type RouteInstructionAccounts = {
  gumballGuard?: PublicKey | Pda;
  machine: PublicKey | Pda;
  payer?: Signer;
};

// Data.
export type RouteInstructionData = {
  discriminator: Array<number>;
  /** The target guard type. */
  guard: GuardType;
  /** Arguments for the guard instruction. */
  data: Uint8Array;
  group: Option<string>;
};

export type RouteInstructionDataArgs = {
  /** The target guard type. */
  guard: GuardTypeArgs;
  /** Arguments for the guard instruction. */
  data: Uint8Array;
  group: OptionOrNullable<string>;
};

export function getRouteInstructionDataSerializer(): Serializer<
  RouteInstructionDataArgs,
  RouteInstructionData
> {
  return mapSerializer<RouteInstructionDataArgs, any, RouteInstructionData>(
    struct<RouteInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['guard', getGuardTypeSerializer()],
        ['data', bytes({ size: u32() })],
        ['group', option(string())],
      ],
      { description: 'RouteInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [229, 23, 203, 151, 122, 227, 173, 42],
    })
  ) as Serializer<RouteInstructionDataArgs, RouteInstructionData>;
}

// Args.
export type RouteInstructionArgs = RouteInstructionDataArgs;

// Instruction.
export function route(
  context: Pick<Context, 'eddsa' | 'payer' | 'programs'>,
  input: RouteInstructionAccounts & RouteInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'gumballGuard',
    'GGRDy4ieS7ExrUu313QkszyuT9o3BvDLuc3H5VLgCpSF'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    gumballGuard: {
      index: 0,
      isWritable: false,
      value: input.gumballGuard ?? null,
    },
    machine: { index: 1, isWritable: true, value: input.machine ?? null },
    payer: { index: 2, isWritable: true, value: input.payer ?? null },
  };

  // Arguments.
  const resolvedArgs: RouteInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.gumballGuard.value) {
    resolvedAccounts.gumballGuard.value = findGumballGuardPda(context, {
      base: expectPublicKey(resolvedAccounts.machine.value),
    });
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getRouteInstructionDataSerializer().serialize(
    resolvedArgs as RouteInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
