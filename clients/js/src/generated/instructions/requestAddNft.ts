/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  findMasterEditionPda,
  findMetadataPda,
  findTokenRecordPda,
} from '@metaplex-foundation/mpl-token-metadata';
import { findAssociatedTokenPda } from '@metaplex-foundation/mpl-toolbox';
import {
  Context,
  Pda,
  PublicKey,
  publicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  array,
  mapSerializer,
  Serializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findGumballMachineAuthorityPda } from '../../hooked';
import { findAddItemRequestPda, findSellerHistoryPda } from '../accounts';
import {
  expectPublicKey,
  getAccountMetasAndSigners,
  ResolvedAccount,
  ResolvedAccountsWithIndices,
} from '../shared';

// Accounts.
export type RequestAddNftInstructionAccounts = {
  /** Gumball Machine account. */
  gumballMachine: PublicKey | Pda;
  /** Seller history account. */
  sellerHistory?: PublicKey | Pda;
  /** Add item request account. */
  addItemRequest?: PublicKey | Pda;
  authorityPda?: PublicKey | Pda;
  /** Seller of the nft */
  seller?: Signer;
  mint: PublicKey | Pda;
  tokenAccount?: PublicKey | Pda;
  metadata?: PublicKey | Pda;
  edition?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  tokenMetadataProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  /** OPTIONAL PNFT ACCOUNTS */
  sellerTokenRecord?: PublicKey | Pda;
  authRules?: PublicKey | Pda;
  instructions?: PublicKey | Pda;
  authRulesProgram?: PublicKey | Pda;
};

// Data.
export type RequestAddNftInstructionData = { discriminator: Array<number> };

export type RequestAddNftInstructionDataArgs = {};

export function getRequestAddNftInstructionDataSerializer(): Serializer<
  RequestAddNftInstructionDataArgs,
  RequestAddNftInstructionData
> {
  return mapSerializer<
    RequestAddNftInstructionDataArgs,
    any,
    RequestAddNftInstructionData
  >(
    struct<RequestAddNftInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'RequestAddNftInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [144, 146, 226, 91, 44, 123, 85, 105],
    })
  ) as Serializer<
    RequestAddNftInstructionDataArgs,
    RequestAddNftInstructionData
  >;
}

// Instruction.
export function requestAddNft(
  context: Pick<Context, 'eddsa' | 'identity' | 'programs'>,
  input: RequestAddNftInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mallowGumball',
    'MGUMqztv7MHgoHBYWbvMyL3E3NJ4UHfTwgLJUQAbKGa'
  );

  // Accounts.
  const resolvedAccounts: ResolvedAccountsWithIndices = {
    gumballMachine: {
      index: 0,
      isWritable: true,
      value: input.gumballMachine ?? null,
    },
    sellerHistory: {
      index: 1,
      isWritable: true,
      value: input.sellerHistory ?? null,
    },
    addItemRequest: {
      index: 2,
      isWritable: true,
      value: input.addItemRequest ?? null,
    },
    authorityPda: {
      index: 3,
      isWritable: true,
      value: input.authorityPda ?? null,
    },
    seller: { index: 4, isWritable: true, value: input.seller ?? null },
    mint: { index: 5, isWritable: false, value: input.mint ?? null },
    tokenAccount: {
      index: 6,
      isWritable: true,
      value: input.tokenAccount ?? null,
    },
    metadata: { index: 7, isWritable: true, value: input.metadata ?? null },
    edition: { index: 8, isWritable: false, value: input.edition ?? null },
    tokenProgram: {
      index: 9,
      isWritable: false,
      value: input.tokenProgram ?? null,
    },
    tokenMetadataProgram: {
      index: 10,
      isWritable: false,
      value: input.tokenMetadataProgram ?? null,
    },
    systemProgram: {
      index: 11,
      isWritable: false,
      value: input.systemProgram ?? null,
    },
    sellerTokenRecord: {
      index: 12,
      isWritable: true,
      value: input.sellerTokenRecord ?? null,
    },
    authRules: { index: 13, isWritable: false, value: input.authRules ?? null },
    instructions: {
      index: 14,
      isWritable: false,
      value: input.instructions ?? null,
    },
    authRulesProgram: {
      index: 15,
      isWritable: false,
      value: input.authRulesProgram ?? null,
    },
  };

  // Default values.
  if (!resolvedAccounts.seller.value) {
    resolvedAccounts.seller.value = context.identity;
  }
  if (!resolvedAccounts.sellerHistory.value) {
    resolvedAccounts.sellerHistory.value = findSellerHistoryPda(context, {
      gumballMachine: expectPublicKey(resolvedAccounts.gumballMachine.value),
      seller: expectPublicKey(resolvedAccounts.seller.value),
    });
  }
  if (!resolvedAccounts.addItemRequest.value) {
    resolvedAccounts.addItemRequest.value = findAddItemRequestPda(context, {
      asset: expectPublicKey(resolvedAccounts.mint.value),
    });
  }
  if (!resolvedAccounts.authorityPda.value) {
    resolvedAccounts.authorityPda.value = findGumballMachineAuthorityPda(
      context,
      { gumballMachine: expectPublicKey(resolvedAccounts.gumballMachine.value) }
    );
  }
  if (!resolvedAccounts.tokenAccount.value) {
    resolvedAccounts.tokenAccount.value = findAssociatedTokenPda(context, {
      mint: expectPublicKey(resolvedAccounts.mint.value),
      owner: expectPublicKey(resolvedAccounts.seller.value),
    });
  }
  if (!resolvedAccounts.metadata.value) {
    resolvedAccounts.metadata.value = findMetadataPda(context, {
      mint: expectPublicKey(resolvedAccounts.mint.value),
    });
  }
  if (!resolvedAccounts.edition.value) {
    resolvedAccounts.edition.value = findMasterEditionPda(context, {
      mint: expectPublicKey(resolvedAccounts.mint.value),
    });
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenMetadataProgram.value) {
    resolvedAccounts.tokenMetadataProgram.value = context.programs.getPublicKey(
      'mplTokenMetadata',
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
    );
    resolvedAccounts.tokenMetadataProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.sellerTokenRecord.value) {
    if (resolvedAccounts.authRulesProgram.value) {
      resolvedAccounts.sellerTokenRecord.value = findTokenRecordPda(context, {
        mint: expectPublicKey(resolvedAccounts.mint.value),
        token: expectPublicKey(resolvedAccounts.tokenAccount.value),
      });
    }
  }
  if (!resolvedAccounts.instructions.value) {
    if (resolvedAccounts.authRulesProgram.value) {
      resolvedAccounts.instructions.value = publicKey(
        'Sysvar1nstructions1111111111111111111111111'
      );
    }
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getRequestAddNftInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
