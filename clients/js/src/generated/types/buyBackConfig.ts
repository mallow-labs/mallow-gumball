/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  publicKey as publicKeySerializer,
  struct,
  u16,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type BuyBackConfig = {
  /** Whether buying back prizes is enabled */
  enabled: boolean;
  /** Whether buying back prizes should be added back to the gumball machine (not yet supported) */
  toGumballMachine: boolean;
  /** Authority that must sign when buying back prizes, to ensure pricing is correct */
  oracleSigner: PublicKey;
  /** Percentage of prize value the creator/gumball machine will pay for buying back prizes */
  valuePct: number;
  /** Fee in basis points paid to marketplace authority when buying back prizes (paid from funds_available) */
  marketplaceFeeBps: number;
  /**
   * Buy backs are disabled when the percentage of items remaining is less than or equal to this value
   * 0 means there is no cutoff, 100 means buy back is always disabled, 50 means buy back is disabled when 50% of items are sold
   * If an item is sold back to the gumball machine to increase the remaining % above this cutoff, buy back is re-enabled
   */
  cutoffPct: number;
};

export type BuyBackConfigArgs = BuyBackConfig;

export function getBuyBackConfigSerializer(): Serializer<
  BuyBackConfigArgs,
  BuyBackConfig
> {
  return struct<BuyBackConfig>(
    [
      ['enabled', bool()],
      ['toGumballMachine', bool()],
      ['oracleSigner', publicKeySerializer()],
      ['valuePct', u8()],
      ['marketplaceFeeBps', u16()],
      ['cutoffPct', u8()],
    ],
    { description: 'BuyBackConfig' }
  ) as Serializer<BuyBackConfigArgs, BuyBackConfig>;
}
